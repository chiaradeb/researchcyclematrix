browseVignettes(googlesheets)
browseVignettes("googlesheets")
my_sheets<-gs_ls()
my_sheets
my_sheets
researchcyclematrix::rcm_dashboard(update_rcm = F)
rcm_dashboard
rcm<-rcm_downlaod()
rcm<-rcm_download()
sub<-subs_download()
rcm_update_from_subs(subs,rcm)
subs<-sub
rcm_update_from_subs(subs,rcm)
debugonce(rcm_dashboard)
rcm_dashboard(rcm,subs,F)
debugonce(country_status_markdown)
rcm<-rcm_download(include_validated = T)
rcm_dashboard(rcm,subs,F)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=rawcopy",
stringsAsFactors = F)
devtools::install()
researchcyclematrix:::g_sheets_update_index()
devtools::install()
researchcyclematrix:::g_sheets_update_index()
researchcyclematrix:::g_sheets_update_index()
library(researchcyclematrix)
rcm_update_from_subs(subs,rcm)
rcm_update_from_subs()
rcm_update_from_subs(subs_download(), rcm_download(include_validated = T))
knitr::opts_chunk$set(echo = FALSE)
library(purrr)
library(knitr)
library(ggplot2)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm<-rcm_download()
rcm<-rcm_download(include_validated = T)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm$days_since_validation[grepl("validated",rcm$status)]<-
(Sys.Date()-lubridate::dmy(rcm$date.validated))[grepl("validated",rcm$status)]
rcm_cl<-as_countrylist(rcm)
delayed$days_delayed<-Sys.Date()-delayed$date.hqsubmission.planned.latest
delayed$country<-substr(delayed$rcid,1,3)
delayed_cl<-as_countrylist(delayed)
recently_validated<-rcm %>% filter(rcm$days_since_validation<=14)
recently_validated_cl<-as_countrylist(recently_validated)
inconsistencies_cl<-as_countrylist(inconsistencies)
countries<-c(names(rcm_cl),names(delayed_cl),names(inconsistencies_cl)) %>% unique %>% sort
cat("validated in the last two weeks: <b>",nrow(recently_validated),"</b><br>")
cat("median days from submission to validation:<b>",median(lubridate::dmy(recently_validated$date.validated)-lubridate::ymd(recently_validated$date.hqsubmission.actual),na.rm = T),"</b><br>")
cat("maximum days from submission to validation:<b>",max(lubridate::dmy(recently_validated$date.validated)-lubridate::ymd(recently_validated$date.hqsubmission.actual),na.rm = T),"</b><br>")
cat("under review:<b>",length(grep("HQ|partner|field",rcm$status)),"</b><br>")
cat("delayed:<b>",nrow(delayed),"</b><br>")
cat("matrix inconsistencies:<b>",nrow(inconsistencies),"</b><br>")
cat("\n\n### How long did validations take?\n\n")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
lubridate::dmy(recently_validated$date.hqsubmission.actual)-lubridate::ymd(recently_validated$date.hqsubmission.actual))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
lubridate::dmy(recently_validated$date.hqsubmission.actual)-lubridate::ymd(recently_validated$date.hqsubmission.actual))))+xlab("submission date")+ylab("days until validation")
recently_validated$date.hqsubmission.actual
recently_validated$date.hqsubmission.actual
recently_validated$date.hqsubmission.actual
lubridate::dmy(recently_validated$date.validated)
recently_validated$date.validated
lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.validated,
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.validated,
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("date validated")+ylab("days until validation")
recently_validated$date.validated
ggplot(recently_validated)+geom_point(
aes(x= lubridate::dmy(date.validated),
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("date validated")+ylab("days until validation")
devtools::install()
researchcyclematrix::rcm_dasboard()
researchcyclematrix::rcm_dashboard()
rcm_dashboard(update_rcm = F)
todo<-todo_download()
rcm_set_validation_date
#' set the "feedback given" date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
rcm_set_validation_date<-function(file.id,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "S",value = date_text)
}
#' set the "feedback given" date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
rcm_set_validation_date<-function(file.id,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "S",value = date_text)
}
#' set the "feedback given" date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
rcm_set_withfield_date<-function(file.id,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "S",value = date_text)
}
devtools::install()
rcm_set_to_withHQ("SYR1706a_Camp profiling in North East Syria - December 2018 update")
rcm_set_to_withField("SYR1706a_Camp profiling in North East Syria - December 2018 update")
devtools::document()
rcm_set_to_withField("SYR1706a_Camp profiling in North East Syria - December 2018 update")
rcm_set_to_withField("SYR1706a_Camp profiling in North East Syria - December 2018 update")
todo
rcm_set_to_withField("SSD1906_Kurwai RNA_Data_1")
todo
rcm_set_to_withField("SSD1906_Kurwai RNA_Analysis_1")
todo
rcm_set_to_validated("SOM1903_Kismayo_Cash_Market_Feasability_Data_1")
debugonce(todo_download)
todo_download()
rcm[rcm$file.id=="NGA1806a_DFID_TPM_Education_Analysis_1 May 2019"]
rcm[rcm$file.id=="NGA1806a_DFID_TPM_Education_Analysis_1 May 2019", ]
rcm[rcm$file.id=="NGA1806a_DFID_TPM_Education_Analysis_1 May 2019", ] %>% t
debugonce(rcm_download)
todo_download()
debugonce(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
rcm_update_from_subs(,rcm)
rcm_update_from_subs(subs = subs_download(),rcm)
debugonce(rcm_update_from_subs)
rcm_update_from_subs(subs = subs_download(),rcm)
subs$status
should_update
debugonce(rcm_update_from_subs)
rcm_update_from_subs(subs = subs_download(),rcm)
should_update
ids_to_update
ids_to_update
should_update
subs$status
library(devtools)
devtools::install("mabafaba/researchcyclematrix")
devtools::install_github("mabafaba/researchcyclematrix")
devtools::install_github("mabafaba/researchcyclematrix")
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
debug(rcm_set_to_withHQ)
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
#' set an item's status to "with Field" on google drive
#' @param file.id the items file id name as a string
#' @export
rcm_set_to_withField<-function (file.id)
{
message(paste0("setting to 'with Field': ",file.id))
rcm_change_value(file.id, column = "V", value = "with Field (api_state)")
rcm_set_withHQ_date(file.id)
}
devtools::load_all()
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
subs
subs<-subs_download()
subs
subs$submission.date
rcm %>% nrow
subs$status<-subs_status(subs,rcm)
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore<-apply(ignore,1,any)
should_update<-sapply(c("not received","delayed","expected"),grepl,x=subs$status,simplify = F) %>% as.data.frame
should_update$rcm_status_empty <- is.na(subs$status)
should_update$rcm_status_empty[subs$status==""]<-TRUE
should_update<-apply(should_update,1,any)
should_update
ids_to_update<-subs$file.id[should_update & !ignore]
ids_to_update<-unique(ids_to_update)
ids_to_update<-ids_to_update[!is.na(ids_to_update)]
ids_to_update<-ids_to_update[ids_to_update!=""]
ids_to_update
should_update<-sapply(c("not received","delayed","expected"),grepl,x=subs$status,simplify = F) %>% as.data.frame
should_update
subs$status<-subs_status(subs,rcm)
subs$status
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore
rcm_update_from_subs()
subs<-subs_download()
rcm<-rcm_download()
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs[subs$file.id=="SOM1705_WPM 2019 - April_Data/Analysis",]
should_update
subs[should_update,]
subs[should_update,] %>% .[file.id =="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[should_update,] %>% .[.$file.id =="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[ids_to_update,]
subs[ids_to_update,"file.id"]
subs[ids_to_update,"file.id"] %>% unlist
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs$status
subs[file.id=="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[subs$file.id=="SOM1705_WPM 2019 - April_Data/Analysis",] %>% t
load_all()
rcm_update_from_subs(subs,rcm)
rcm_update_from_subs(subs,rcm)
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs$submission.datetime
subs$submission.date
load_all()
rcm_update_from_subs(subs,rcm)
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date))
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date)}
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date)}
i
this_file.id
this_file.id_date<-subs$submission.date[which(subs$file.id==this_file.id)[1]]
this_file.id_date
this_file.id_date<-lubridate::dmy(this_file.id_date)
this_file.id_date
rcm_set_submission_date(
this_file.id,
this_file.id_date)
this_file.id_date
this_file.id_date %>% class
this_file.id_date %>% as.Date.POSIXct()
this_file.id_date <- as.Date.POSIXct(this_file.id_date)
rcm_set_submission_date(
this_file.id,
this_file.id_date)
this_file.id_date
this_file.id_date
debug(rcm_set_submission_date)
this_file.id_date
this_file.id_date %>% class
this_file.id_date %>% typeof
this_file.id_date %>% sgtr
this_file.id_date %>% attributes
rcm_set_submission_date(
this_file.id,
this_file.id_date)
format(date, format="%d-%b-%y")
load_all()
rcm_update_from_subs(subs,rcm)
rcm_dashboard()
rcm<-rcm_download(include_validated = F,include_archived = F)
rcm_check(rcm) %>% .$issue %>% table
rcm[rcm$unit =="data",] %>% rcm_check %>% .$issue %>% table
library(ggplot)
library(ggplot2)
df<-data.frame(a=letters[1:4],b=runif(4))
df
barchart<-function(df){
ggplot(df)+geom_bar(aes(x=a,y=b))
}
ggplot(df)+geom_bar(aes(x=a,y=b),stat = identity)
ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
barchart<-function(df){
ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
}
barchart() %>% class()
barchart(df) %>% class()
library(dplyr)
barchart(df) %>% class()
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
library(gridExtra)
grid.arrange(ggp)
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
}
barchart(df) %>% class()
barchart(df) %>% str
ggp_grid<-grid.arrange(ggp)
barchart(df) %>% attributes
barchart(df) %>% attributes %>% .$grobs
barchart(df)
barchart(df) %>% plot
barchart(df) %>% attributes
barchart(df) %>% attributes %>% .$children
attrs<-barchart(df) %>% attributes
attrs
attrs<-barchart(df)
grid<-barchart(df)
grid$grobs
grid$grobs$grob
grid$grobs[[1]]
num_bars<-length(unique(a))
attributes(grid)
ggsave(ggp, units = "cm")
ggsave(filename = "test.jpg",plot = ggp, units = "cm")
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm")
height
ggp_grid
}
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm")
ggp_grid
}
bc<-barchart(df)
bc<-barchart(df)
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm")
ggp_grid
}
attributes(bc)
bc<-barchart(df)
attributes(bc)
attributes(df)
attributes(df)$creator <- "martin"
attributes(df)
attributes(df)$creator
df
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
visualisation<-bc
bc
visualisation
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
names(attributes(visualisation)))
names(attributes(visualisation))
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters
list(1,2,3)
do.call(c,list(1,2,3))
c(1,2,3)
do.call(sum,list(1,2,3,NA))
sum(1,2,3,NA)
params<-list(1,2,3,NA)
do.call(sum,params)
params<-list(1,2,3,NA,na.rm = FALSE)
params
do.call(sum,params)
params<-list(1,2,3,NA,na.rm = FALSE)
do.call(sum,params)
params<-list(1,2,3,NA,na.rm = TRUE)
do.call(sum,params)
ggsave_parameters
ggsave_parameters
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 10)
ggp_grid
}
attributes(bc)
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 10)
ggp_grid
}
bc<-barchart(df)
attributes(bc)
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters
visualisation<-bc
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
ggsave_parameters
filename<-"test.jpg"
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
ggsave_parameters
ggsave_visimpact<-function(visualisation,filename){
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
return(do.call(ggsave, ggsave_parameters))
}
ggsave_visimpact(bc,"test2.jpg")
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
ggsave_parameters
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = list(visualisation), filename = filename)
ggsave_visimpact<-function(visualisation,filename){
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = list(visualisation), filename = filename)
return(do.call(ggsave, ggsave_parameters))
}
ggsave_visimpact(bc,"test2.jpg")
browseURL(getwd())
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 1)
ggp_grid
}
bc<-barchart(df)
ggsave_visimpact(bc,"test2.jpg")
bc
class(bc)
bc
class(bc)
print
print.data.frame
class(bc)<- "visimpact_vis"
class(bc)
print.visimpact_vis<-function(x){
print("HELLO")
}
print(bc)
print
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 1)
ggp_grid
}
print(bc)
ggsave
ggsave
invisible()
invisible() %>% str
print(1) %>% str
1 %>% sum(2) %>% print %>% sum(3) %>% print
#' @param ... other arguments passed to ggplot2::ggsave()
#'
ggsave_visimpact<-function(visualisation,filename, ...){
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
params_passed<-list(...)
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = list(visualisation), filename = filename)
do.call(ggsave, ggsave_parameters)
return(invisible(visualisation))
}
114 + 44 + 6.2
source('C:/Users/Martin Barner/work/rpackages/researchcyclematrix/R/rcm_plots.R')
source('C:/Users/Martin Barner/work/rpackages/researchcyclematrix/R/rcm_plots.R')
devtools::install(dependencies = F)
devtools::document()
devtools::install(dependencies = F)
source('C:/Users/Martin Barner/work/rpackages/researchcyclematrix/R/rcm_plots.R')
devtools::document()
devtools::install(dependencies = F)
