ids_to_update
ids_to_update
should_update
subs$status
library(devtools)
devtools::install("mabafaba/researchcyclematrix")
devtools::install_github("mabafaba/researchcyclematrix")
devtools::install_github("mabafaba/researchcyclematrix")
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
debug(rcm_set_to_withHQ)
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
#' set an item's status to "with Field" on google drive
#' @param file.id the items file id name as a string
#' @export
rcm_set_to_withField<-function (file.id)
{
message(paste0("setting to 'with Field': ",file.id))
rcm_change_value(file.id, column = "V", value = "with Field (api_state)")
rcm_set_withHQ_date(file.id)
}
devtools::load_all()
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
subs
subs<-subs_download()
subs
subs$submission.date
rcm %>% nrow
subs$status<-subs_status(subs,rcm)
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore<-apply(ignore,1,any)
should_update<-sapply(c("not received","delayed","expected"),grepl,x=subs$status,simplify = F) %>% as.data.frame
should_update$rcm_status_empty <- is.na(subs$status)
should_update$rcm_status_empty[subs$status==""]<-TRUE
should_update<-apply(should_update,1,any)
should_update
ids_to_update<-subs$file.id[should_update & !ignore]
ids_to_update<-unique(ids_to_update)
ids_to_update<-ids_to_update[!is.na(ids_to_update)]
ids_to_update<-ids_to_update[ids_to_update!=""]
ids_to_update
should_update<-sapply(c("not received","delayed","expected"),grepl,x=subs$status,simplify = F) %>% as.data.frame
should_update
subs$status<-subs_status(subs,rcm)
subs$status
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore
rcm_update_from_subs()
subs<-subs_download()
rcm<-rcm_download()
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs[subs$file.id=="SOM1705_WPM 2019 - April_Data/Analysis",]
should_update
subs[should_update,]
subs[should_update,] %>% .[file.id =="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[should_update,] %>% .[.$file.id =="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[ids_to_update,]
subs[ids_to_update,"file.id"]
subs[ids_to_update,"file.id"] %>% unlist
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs$status
subs[file.id=="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[subs$file.id=="SOM1705_WPM 2019 - April_Data/Analysis",] %>% t
load_all()
rcm_update_from_subs(subs,rcm)
rcm_update_from_subs(subs,rcm)
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs$submission.datetime
subs$submission.date
load_all()
rcm_update_from_subs(subs,rcm)
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date))
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date)}
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date)}
i
this_file.id
this_file.id_date<-subs$submission.date[which(subs$file.id==this_file.id)[1]]
this_file.id_date
this_file.id_date<-lubridate::dmy(this_file.id_date)
this_file.id_date
rcm_set_submission_date(
this_file.id,
this_file.id_date)
this_file.id_date
this_file.id_date %>% class
this_file.id_date %>% as.Date.POSIXct()
this_file.id_date <- as.Date.POSIXct(this_file.id_date)
rcm_set_submission_date(
this_file.id,
this_file.id_date)
this_file.id_date
this_file.id_date
debug(rcm_set_submission_date)
this_file.id_date
this_file.id_date %>% class
this_file.id_date %>% typeof
this_file.id_date %>% sgtr
this_file.id_date %>% attributes
rcm_set_submission_date(
this_file.id,
this_file.id_date)
format(date, format="%d-%b-%y")
load_all()
rcm_update_from_subs(subs,rcm)
rcm_dashboard()
rcm<-rcm_download(include_validated = F,include_archived = F)
rcm_check(rcm) %>% .$issue %>% table
rcm[rcm$unit =="data",] %>% rcm_check %>% .$issue %>% table
library(ggplot)
library(ggplot2)
df<-data.frame(a=letters[1:4],b=runif(4))
df
barchart<-function(df){
ggplot(df)+geom_bar(aes(x=a,y=b))
}
ggplot(df)+geom_bar(aes(x=a,y=b),stat = identity)
ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
barchart<-function(df){
ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
}
barchart() %>% class()
barchart(df) %>% class()
library(dplyr)
barchart(df) %>% class()
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
library(gridExtra)
grid.arrange(ggp)
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
}
barchart(df) %>% class()
barchart(df) %>% str
ggp_grid<-grid.arrange(ggp)
barchart(df) %>% attributes
barchart(df) %>% attributes %>% .$grobs
barchart(df)
barchart(df) %>% plot
barchart(df) %>% attributes
barchart(df) %>% attributes %>% .$children
attrs<-barchart(df) %>% attributes
attrs
attrs<-barchart(df)
grid<-barchart(df)
grid$grobs
grid$grobs$grob
grid$grobs[[1]]
num_bars<-length(unique(a))
attributes(grid)
ggsave(ggp, units = "cm")
ggsave(filename = "test.jpg",plot = ggp, units = "cm")
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm")
height
ggp_grid
}
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm")
ggp_grid
}
bc<-barchart(df)
bc<-barchart(df)
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm")
ggp_grid
}
attributes(bc)
bc<-barchart(df)
attributes(bc)
attributes(df)
attributes(df)$creator <- "martin"
attributes(df)
attributes(df)$creator
df
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
visualisation<-bc
bc
visualisation
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
names(attributes(visualisation)))
names(attributes(visualisation))
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters
list(1,2,3)
do.call(c,list(1,2,3))
c(1,2,3)
do.call(sum,list(1,2,3,NA))
sum(1,2,3,NA)
params<-list(1,2,3,NA)
do.call(sum,params)
params<-list(1,2,3,NA,na.rm = FALSE)
params
do.call(sum,params)
params<-list(1,2,3,NA,na.rm = FALSE)
do.call(sum,params)
params<-list(1,2,3,NA,na.rm = TRUE)
do.call(sum,params)
ggsave_parameters
ggsave_parameters
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 10)
ggp_grid
}
attributes(bc)
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 10)
ggp_grid
}
bc<-barchart(df)
attributes(bc)
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters
visualisation<-bc
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
ggsave_parameters
filename<-"test.jpg"
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
ggsave_parameters
ggsave_visimpact<-function(visualisation,filename){
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
return(do.call(ggsave, ggsave_parameters))
}
ggsave_visimpact(bc,"test2.jpg")
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = visualisation, filename = filename)
ggsave_parameters
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = list(visualisation), filename = filename)
ggsave_visimpact<-function(visualisation,filename){
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = list(visualisation), filename = filename)
return(do.call(ggsave, ggsave_parameters))
}
ggsave_visimpact(bc,"test2.jpg")
browseURL(getwd())
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 1)
ggp_grid
}
bc<-barchart(df)
ggsave_visimpact(bc,"test2.jpg")
bc
class(bc)
bc
class(bc)
print
print.data.frame
class(bc)<- "visimpact_vis"
class(bc)
print.visimpact_vis<-function(x){
print("HELLO")
}
print(bc)
print
barchart<-function(df){
ggp<-ggplot(df)+geom_bar(aes(x=a,y=b),stat = "identity")
ggp_grid<-grid.arrange(ggp)
num_bars<-length(unique(df$a))
attributes(ggp_grid)$ggsave_parameters <- list(height = num_bars*2, units = "cm", width = 1)
ggp_grid
}
print(bc)
ggsave
ggsave
invisible()
invisible() %>% str
print(1) %>% str
1 %>% sum(2) %>% print %>% sum(3) %>% print
#' @param ... other arguments passed to ggplot2::ggsave()
#'
ggsave_visimpact<-function(visualisation,filename, ...){
if(!("ggsave_parameters" %in% names(attributes(visualisation)))){
stop("can only save ggplot objects produced with visualisationIMPACT")
}
params_passed<-list(...)
ggsave_parameters<-attributes(visualisation)$ggsave_parameters
ggsave_parameters<- c(ggsave_parameters, plot = list(visualisation), filename = filename)
do.call(ggsave, ggsave_parameters)
return(invisible(visualisation))
}
114 + 44 + 6.2
source('C:/Users/Martin Barner/work/rpackages/researchcyclematrix/R/rcm_plots.R')
source('C:/Users/Martin Barner/work/rpackages/researchcyclematrix/R/rcm_plots.R')
devtools::install(dependencies = F)
devtools::document()
devtools::install(dependencies = F)
source('C:/Users/Martin Barner/work/rpackages/researchcyclematrix/R/rcm_plots.R')
devtools::document()
devtools::install(dependencies = F)
devtools::install()
researchcyclematrix::rcm_dashboard()
todorow<-tibble::as_tibble(rcm_find_row_by_file.id(rcm,file.id))
devtools::install(dependencies = F)
researchcyclematrix::rcm_dashboard()
traceback()
devtools::install(dependencies = F)
researchcyclematrix::rcm_dashboard()
library(researchcyclematrix)
x<-rcm_download()
devtools::install(dependencies = F)
knitr::opts_chunk$set(echo = FALSE)
library(purrr)
library(knitr)
library(ggplot2)
library(tibble)
library(dplyr)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm_dashboard()
rcm_dashboard(rcm = rcm,,F)
rcm<-rcm_download()
subs<-subs_download()
rcm_dashboard(rcm,,F)
x<-rcm
knitr::opts_chunk$set(echo = FALSE)
library(purrr)
library(knitr)
library(ggplot2)
library(tibble)
library(dplyr)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm$days_since_validation[grepl("validated",rcm$status)]<-
(Sys.Date()-lubridate::dmy(rcm$date.validated))[grepl("validated",rcm$status)]
rcm_cl<-as_countrylist(rcm)
delayed$days_delayed<-Sys.Date()-delayed$date.hqsubmission.planned.latest
rcm_dashboard
subs
delayed<todo_delayed()
delayed<-todo_delayed(rcm)
delayed
knitr::opts_chunk$set(echo = FALSE)
library(purrr)
library(knitr)
library(ggplot2)
library(tibble)
library(dplyr)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm$days_since_validation[grepl("validated",rcm$status)]<-
(Sys.Date()-lubridate::dmy(rcm$date.validated))[grepl("validated",rcm$status)]
rcm_cl<-as_countrylist(rcm)
delayed$days_delayed<-Sys.Date()-delayed$date.hqsubmission.planned.latest
delayed$country<-substr(delayed$rcid,1,3)
delayed_cl<-as_countrylist(delayed)
recently_validated<-rcm %>% filter(rcm$days_since_validation<=14)
recently_validated<-rcm %>% filter(rcm$days_since_validation<=14)
recently_validated<-rcm %>% filter(rcm$days_since_validation<=14)
rcm
rcm
rcm %>% nrow
rcm$days_since_validation
rcm_dashboard(rcm,subs,F)
if(is.null(rcm)){rcm<-rcm_download(include_validated=T)}
if(is.null(subs)){subs<-subs_download()}
if(update_rcm){
message(crayon::black("updating matrix with any new submissions.."))
rcm_update_from_subs(subs,rcm)
}
rcm<-rcm[rcm$unit=="data",]
todo<-todo_create(rcm,subs)
subs$file.id[subs$file.id %in% rcm$file.id,"file.id"]
subs$file.id[subs$file.id %in% rcm$file.id]
subs$file.id[!(subs$file.id %in% rcm$file.id)]
rcm<-rcm_download(include_archived = T,include_validated = T,gdrive_links = F)
subs$file.id[!(subs$file.id %in% rcm$file.id)]
subs$file.id[!(subs$file.id %in% rcm$file.id)] %>% lapply(cat)
subs$file.id[!(subs$file.id %in% rcm$file.id)] %>% cat
knitr::opts_chunk$set(echo = FALSE)
library(purrr)
library(knitr)
library(ggplot2)
library(tibble)
library(dplyr)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm$days_since_validation[grepl("validated",rcm$status)]<-
(Sys.Date()-lubridate::dmy(rcm$date.validated))[grepl("validated",rcm$status)]
rcm_cl<-as_countrylist(rcm)
delayed$days_delayed<-Sys.Date()-delayed$date.hqsubmission.planned.latest
delayed$country<-substr(delayed$rcid,1,3)
delayed_cl<-as_countrylist(delayed)
recently_validated<-rcm %>% filter(rcm$days_since_validation<=14)
recently_validated_cl<-as_countrylist(recently_validated)
inconsistencies_cl<-as_countrylist(inconsistencies)
delayed<-todo_delayed(rcm)
inconsistent<-rcm_check(rcm)
inconsistent<-inconsistent %>% filter(
!(issue %in% c("planned submission passed but no received date", "data unit item with non-standardisable status"))
)
country_status_markdown(rcm = rcm,delayed = delayed,inconsistencies = inconsistent)
researchcyclematrix:::country_status_markdown(rcm = rcm,delayed = delayed,inconsistencies = inconsistent)
rcm<-rcm[!rcm$archived,]
rcm_dashboard(rcm,subs,F)
library(lubridate)
ymd("2019-04-17") - Sys.Date()
rcm$archived %>% table
rcm<-rcm_download(include_archived = T,include_validated = T,gdrive_links = FALSE)
filter(subs,file.id %in% rcm$file.id)
`%!vin%`<-function(x,y){x[!(x%in%y)]}
subs$file.id %!vin% rcm$file.id
subs$file.id %!vin% rcm$file.id %>% paste(collapse = "\n") %>% cat
library(researchcyclematrix)
browseVignettes("researchcyclematrix")
devtools::install(build_vignettes = T,dependencies = FALSE)
library(researchcyclematrix)
rcm_prefill_research_tracker("../../validation/monthly_tracker.xlsx")
# get first three letters country code from research cycle ID
rcm$country<-substr(rcm$rcid, 1, 3)
# get first three letters country code from research cycle ID
rcm<-rcm_download()
# get first three letters country code from research cycle ID
rcm<-rcm_download()
rcm$country<-substr(rcm$rcid, 1, 3)
rcm$country<-substr(rcm$rcid, 1, 3)
rcm_by_country<- split.data.frame(rcm,rcm$country)
names(rcm_by_country)
output_xlsx_file_name <- paste0("tracker_",names(rcm_by_country),"_", Sys.Date(),".xlsx")
rcm$country<-substr(rcm$rcid, 1, 3)
rcm_by_country<- split.data.frame(rcm,rcm$country)
output_xlsx_file_name <- paste0("tracker_",names(rcm_by_country),"_", Sys.Date(),".xlsx")
# use the "purrr" package to do something many times:
library(purrr)
# run the function on each country / each part of the rcm and create
purrr::map2(output_xlsx_file_name,
rcm_by_country,
rcm_prefill_research_tracker)
# run the function on each country / each part of the rcm and create
purrr::map2(output_xlsx_file_name,
rcm_by_country,
possibly(rcm_prefill_research_tracker))
# run the function on each country / each part of the rcm and create
purrr::map2(output_xlsx_file_name,
rcm_by_country,
possibly(rcm_prefill_research_tracker,otherwise = NA))
getwd()
browseURL("tracker_MLI_2019-08-09.xlsx")
browseURL("tracker_MLI_2019-08-09.xlsx")
# run the function on each country / each part of the rcm and create
purrr::map2(output_xlsx_file_name,
rcm_by_country,
possibly(rcm_prefill_research_tracker,otherwise = NA))
getwd()
list.files()
devtools::install(build_vignettes = TRUE)
browseVignettes("researchcyclematrix")
# run the function on each country / each part of the rcm and create
safe_rcm_prefill_research_tracker <- possibly(rcm_prefill_research_tracker,otherwise = "couldn't write xlsx file.")
devtools::install(build_vignettes = TRUE)
browseVignettes("researchcyclematrix")
devtools::install(build_vignettes = TRUE)
browseVignettes("researchcyclematrix")
