document()
library(devtools)
document()
install()
library(researchcyclematrix)
todo<-todo_download()
researchcyclematrix::rcm_set_to_validated
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
rcm_set_validation_date(file.id)
}
rcm_set_hours_worked
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
}
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
}
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
#' @r
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
file.id
}
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
#' @r
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
invisible(file.id)
}
#' save the hours worked in the rcm
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
#' @return the file id
rcm_set_hours_worked <- function (file.id,hours){
if(!is.na(hours)){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
}else{
hours<-"NA"
}
rcm_change_value(file.id, column = "BB", value = hours)
invisible(file.id)
}
#' set the validation date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
#' @export
rcm_set_validation_date<-function(file.id,hours_worked=0.5,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(!(is.numeric(hours_worked)|is.na(hours_worked))){stop("hours worked must be a number or NA")}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "X",value = date_text)
rcm_set_hours_worked(file.id,hours_worked)
}
#' set an item's status to "validated" on google drive
#' @param file.id the items file id name as a string
#' @export
rcm_set_to_validated<-function(file.id,hours_worked){
if(!(is.numeric(hours_worked)|is.na(hours_worked))){stop("hours worked must be a number or NA")}
message(paste0("setting to 'validated': ",file.id))
rcm_change_value(file.id,column = "V",value = "validated (api_state)")
rcm_set_validation_date(file.id)
rcm_set_hours_worked(file.id,hours_worked)
}
todo
rcm_set_hours_worked("JOR1807_UN Women_Project_Monitoring_Data_1",10)
devtools::install()
library(researchcyclematrix)
rm(rcm_set_to_validated())
rm(rcm_set_to_validated)
todo<-todo_download()
rcm_set_hours_worked("JOR1807_UN Women_Project_Monitoring_Data_1",10)
rm(rcm_set_hours_worked)
researchcyclematrix:::rcm_set_hours_worked("JOR1807_UN Women_Project_Monitoring_Data_1",10)
rcm_set_to_validated("JOR1807_UN Women_Project_Monitoring_Data_1",hours_worked = 5)
todo_next(todo,1)
todo<-todo_validate_next(todo,100)
rcm_set_to_validated("JOR1807_UN Women_Project_Monitoring_Data_1")
if(!("rstudioapi" %in% installed.packages()[,"Package"])){install.packages("rstudioapi")};require("rstudioapi")
# if(!("rstudioapi" %in% installed.packages()[,"Package"])){install.packages("rstudioapi")};require("rstudioapi")
setwd("../../../Downloads/yann stuff/")
# take last it of splitted string
sp_multiple<-function(x,sep){tail(strsplit(x,sep)[[1]],1)}
concatenate_sm_var<-function(questionnaire,my_sm_vars){
# my_sm_vars: the select_multiple variable from the questionnaire
pattern=paste0(my_sm_vars,"\\.")
#get the var names
sm_name<-names(questionnaire)[grep(pattern,names(questionnaire))]
# extract the choices names from headings
ch<-lapply(sm_name,sp_multiple,sep=pattern) %>% unlist
# get the choices from questionnaire
choices_questionnaire<-questionnaire$choices_per_variable[[my_sm_vars]]$name
# check if it matchs with questionnaires
if(!all(ch %in% choices_questionnaire)){
# it does not but maybe we fixe it with make.names
if(all(ch %in% make.names(choices_questionnaire))){
# reorder questionnaire choices to follow data order
ch<-choices_questionnaire[match(ch,make.names(choices_questionnaire))]
} else {
print(paste0(my_sm_vars,": the headings choices do not match the questionnaire choices"))
}
}
# here assumption that is 0/1 or TRUE/FALSE only - no characters
noname<-function(vec,ch){
ch[vec%in%c(1,TRUE)] %>% paste(collapse=" ")
}
# extract the data
sm_data<-questionnaire[sm_name] %>% as.data.frame
# contecatenate the choices
var_sm_out<-apply(sm_data,1,noname,ch=ch)
# would return the data
# sm_data[[my_sm_vars]]<-var_sm_out
# return(sm_data)
# just return the vector
return(var_sm_out)
}
#
# # load all the codes, libraries etc.:
#
# getwd()
# source("./internal/R/dependencies.R")
list.files()
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
# load questionnaire and create associated functions:
questionnaire<-load_questionnaire(data,questions.file = "questions.csv",
choices.file = "choices.csv",
choices.label.column.to.use = "name")
library(koboquest)
ls(envir = "package:researchcyclematrix")
ls(envir = "researchcyclematrix")
lsf.str("package:researchcyclematrix")
library(researchcyclematrix)
lsf.str("package:researchcyclematrix")
library(devtools)
install_github("mabafaba/researchcyclematrix")
researchcyclematrix::rcm_delayed_to_google_sheet
usethis::use_package("tibble","Depends")
usethis::use_package("dplyr")
load_all()
usethis::use_package("dplyr","Depends")
library("researchcyclematrix")
researchcyclematrix::rcm_dashboard()
todo<-todo_download()
todo[todo$hq_focal_point=="Martin"]
todo[todo$hq_focal_point=="Martin",]
todo$hq_focal_point %>% table
rcm_find_file.id(rcm,"IRQ JPMI")
rcm<-rcm_download()
rcm_find_row_by_file.id(rcm,"IRQ JPMI")
rcm_find_row_by_file.id(rcm,"IRQ joint")
rcm_find_row_by_file.id(rcm,"IRQ price")
rcm_find_row_by_file.id(rcm,"IRQ price")
rcm_find_row_by_file.id(rcm,"IRQ price") -> id
id
id$file.id
todo
rcm_find_row_by_file.id(rcm,"SYR1701a_HSOS Round 46 data / Analysis" ) %>% t %>% kable
rcm[rcm$file.id=="SYR1701a_HSOS Round 46 data / Analysis"]
rcm[rcm$file.id=="SYR1701a_HSOS Round 46 data / Analysis",]
usethis::use_package("rmarkdown")
usethis::use_package("rmarkdowasdfn")
usethis::use_package("knitr")
roxygen2::roxygenise(clean = TRUE)
rcm_download
rcm<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=RC_Matrix_2.1",
stringsAsFactors = F)
ffb<-rcm
ffb %>% as_tibble()
ffb$file.id.AFG1803.AFG1803.AFG1803.AFG1803.BGD1703.BGD1703.BGD1803.BGD1803.BGD1806.BGD1806.BGD1902b.BGD1902b.BRA1802.BRA1802.BRA1802.BRA1802.BRA1802
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=RC_Matrix_2.1",
stringsAsFactors = F)
ffb
ffb %>% as_tibble
ffb %>% tibble::as_tibble %>% nrow
ffb %>% (tibble::as_tibble) %>% nrow
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv",
stringsAsFactors = F)
ffb
ffb %>% (tibble::as_tibble) %>% nrow
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=submissions",
stringsAsFactors = F)
ffb %>% (tibble::as_tibble)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=submissions",
stringsAsFactors = F)
ffb
ffb %>% (tibble::as_tibble) %>% nrow
ffb %>% (tibble::as_tibble)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=raw copy",
stringsAsFactors = F)
ffb
ffb %>% (tibble::as_tibble)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=raw copy",
stringsAsFactors = F)
ffb %>% (tibble::as_tibble) %>% names
googlesheets::gs_read_csv(ss = 'afd')
?googlesheets
browseVignettes(googlesheets)
browseVignettes("googlesheets")
my_sheets<-gs_ls()
my_sheets
my_sheets
researchcyclematrix::rcm_dashboard(update_rcm = F)
rcm_dashboard
rcm<-rcm_downlaod()
rcm<-rcm_download()
sub<-subs_download()
rcm_update_from_subs(subs,rcm)
subs<-sub
rcm_update_from_subs(subs,rcm)
debugonce(rcm_dashboard)
rcm_dashboard(rcm,subs,F)
debugonce(country_status_markdown)
rcm<-rcm_download(include_validated = T)
rcm_dashboard(rcm,subs,F)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=rawcopy",
stringsAsFactors = F)
devtools::install()
researchcyclematrix:::g_sheets_update_index()
devtools::install()
researchcyclematrix:::g_sheets_update_index()
researchcyclematrix:::g_sheets_update_index()
library(researchcyclematrix)
rcm_update_from_subs(subs,rcm)
rcm_update_from_subs()
rcm_update_from_subs(subs_download(), rcm_download(include_validated = T))
knitr::opts_chunk$set(echo = FALSE)
library(purrr)
library(knitr)
library(ggplot2)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm<-rcm_download()
rcm<-rcm_download(include_validated = T)
as_countrylist<-function(x){
x$country<-substr(x$rcid,1,3)
x_countrylist<-x %>% split.data.frame(x$country)
}
rcm$has_comment<-!(rcm$comment %in% c("", " ", NA))
rcm$days_since_validation[grepl("validated",rcm$status)]<-
(Sys.Date()-lubridate::dmy(rcm$date.validated))[grepl("validated",rcm$status)]
rcm_cl<-as_countrylist(rcm)
delayed$days_delayed<-Sys.Date()-delayed$date.hqsubmission.planned.latest
delayed$country<-substr(delayed$rcid,1,3)
delayed_cl<-as_countrylist(delayed)
recently_validated<-rcm %>% filter(rcm$days_since_validation<=14)
recently_validated_cl<-as_countrylist(recently_validated)
inconsistencies_cl<-as_countrylist(inconsistencies)
countries<-c(names(rcm_cl),names(delayed_cl),names(inconsistencies_cl)) %>% unique %>% sort
cat("validated in the last two weeks: <b>",nrow(recently_validated),"</b><br>")
cat("median days from submission to validation:<b>",median(lubridate::dmy(recently_validated$date.validated)-lubridate::ymd(recently_validated$date.hqsubmission.actual),na.rm = T),"</b><br>")
cat("maximum days from submission to validation:<b>",max(lubridate::dmy(recently_validated$date.validated)-lubridate::ymd(recently_validated$date.hqsubmission.actual),na.rm = T),"</b><br>")
cat("under review:<b>",length(grep("HQ|partner|field",rcm$status)),"</b><br>")
cat("delayed:<b>",nrow(delayed),"</b><br>")
cat("matrix inconsistencies:<b>",nrow(inconsistencies),"</b><br>")
cat("\n\n### How long did validations take?\n\n")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
lubridate::dmy(recently_validated$date.hqsubmission.actual)-lubridate::ymd(recently_validated$date.hqsubmission.actual))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
lubridate::dmy(recently_validated$date.hqsubmission.actual)-lubridate::ymd(recently_validated$date.hqsubmission.actual))))+xlab("submission date")+ylab("days until validation")
recently_validated$date.hqsubmission.actual
recently_validated$date.hqsubmission.actual
recently_validated$date.hqsubmission.actual
lubridate::dmy(recently_validated$date.validated)
recently_validated$date.validated
lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.hqsubmission.actual,
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.validated,
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("submission date")+ylab("days until validation")
ggplot(recently_validated)+geom_point(
aes(x= date.validated,
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("date validated")+ylab("days until validation")
recently_validated$date.validated
ggplot(recently_validated)+geom_point(
aes(x= lubridate::dmy(date.validated),
y=as.numeric(
-(lubridate::ymd(recently_validated$date.hqsubmission.actual)-lubridate::dmy(recently_validated$date.validated)))))+xlab("date validated")+ylab("days until validation")
devtools::install()
researchcyclematrix::rcm_dasboard()
researchcyclematrix::rcm_dashboard()
rcm_dashboard(update_rcm = F)
todo<-todo_download()
rcm_set_validation_date
#' set the "feedback given" date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
rcm_set_validation_date<-function(file.id,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "S",value = date_text)
}
#' set the "feedback given" date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
rcm_set_validation_date<-function(file.id,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "S",value = date_text)
}
#' set the "feedback given" date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
rcm_set_withfield_date<-function(file.id,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "S",value = date_text)
}
devtools::install()
rcm_set_to_withHQ("SYR1706a_Camp profiling in North East Syria - December 2018 update")
rcm_set_to_withField("SYR1706a_Camp profiling in North East Syria - December 2018 update")
devtools::document()
rcm_set_to_withField("SYR1706a_Camp profiling in North East Syria - December 2018 update")
rcm_set_to_withField("SYR1706a_Camp profiling in North East Syria - December 2018 update")
todo
rcm_set_to_withField("SSD1906_Kurwai RNA_Data_1")
todo
rcm_set_to_withField("SSD1906_Kurwai RNA_Analysis_1")
todo
rcm_set_to_validated("SOM1903_Kismayo_Cash_Market_Feasability_Data_1")
debugonce(todo_download)
todo_download()
rcm[rcm$file.id=="NGA1806a_DFID_TPM_Education_Analysis_1 May 2019"]
rcm[rcm$file.id=="NGA1806a_DFID_TPM_Education_Analysis_1 May 2019", ]
rcm[rcm$file.id=="NGA1806a_DFID_TPM_Education_Analysis_1 May 2019", ] %>% t
debugonce(rcm_download)
todo_download()
debugonce(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
rcm_update_from_subs(,rcm)
rcm_update_from_subs(subs = subs_download(),rcm)
debugonce(rcm_update_from_subs)
rcm_update_from_subs(subs = subs_download(),rcm)
subs$status
should_update
debugonce(rcm_update_from_subs)
rcm_update_from_subs(subs = subs_download(),rcm)
should_update
ids_to_update
ids_to_update
should_update
subs$status
library(devtools)
devtools::install("mabafaba/researchcyclematrix")
devtools::install_github("mabafaba/researchcyclematrix")
devtools::install_github("mabafaba/researchcyclematrix")
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
debug(rcm_set_to_withHQ)
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
#' set an item's status to "with Field" on google drive
#' @param file.id the items file id name as a string
#' @export
rcm_set_to_withField<-function (file.id)
{
message(paste0("setting to 'with Field': ",file.id))
rcm_change_value(file.id, column = "V", value = "with Field (api_state)")
rcm_set_withHQ_date(file.id)
}
devtools::load_all()
rcm_set_to_withHQ("NGA1806a_DFID_TPM_Education_Analysis_1 May 2019")
subs
subs<-subs_download()
subs
subs$submission.date
rcm %>% nrow
subs$status<-subs_status(subs,rcm)
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore<-apply(ignore,1,any)
should_update<-sapply(c("not received","delayed","expected"),grepl,x=subs$status,simplify = F) %>% as.data.frame
should_update$rcm_status_empty <- is.na(subs$status)
should_update$rcm_status_empty[subs$status==""]<-TRUE
should_update<-apply(should_update,1,any)
should_update
ids_to_update<-subs$file.id[should_update & !ignore]
ids_to_update<-unique(ids_to_update)
ids_to_update<-ids_to_update[!is.na(ids_to_update)]
ids_to_update<-ids_to_update[ids_to_update!=""]
ids_to_update
should_update<-sapply(c("not received","delayed","expected"),grepl,x=subs$status,simplify = F) %>% as.data.frame
should_update
subs$status<-subs_status(subs,rcm)
subs$status
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore
rcm_update_from_subs()
subs<-subs_download()
rcm<-rcm_download()
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs[subs$file.id=="SOM1705_WPM 2019 - April_Data/Analysis",]
should_update
subs[should_update,]
subs[should_update,] %>% .[file.id =="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[should_update,] %>% .[.$file.id =="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[ids_to_update,]
subs[ids_to_update,"file.id"]
subs[ids_to_update,"file.id"] %>% unlist
ignore<-sapply(c("with HQ","validated","not found in RCM"),grepl,x=subs$status,simplify = F) %>% as.data.frame(stringsAsFactors=F)
ignore
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs$status
subs[file.id=="SOM1705_WPM 2019 - April_Data/Analysis",]
subs[subs$file.id=="SOM1705_WPM 2019 - April_Data/Analysis",] %>% t
load_all()
rcm_update_from_subs(subs,rcm)
rcm_update_from_subs(subs,rcm)
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
subs$submission.datetime
subs$submission.date
load_all()
rcm_update_from_subs(subs,rcm)
debug(rcm_update_from_subs)
rcm_update_from_subs(subs,rcm)
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date))
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date)}
for(this_file.id in ids_to_update){
this_file.id_date<-subs$submission.datetime[which(subs$file.id==this_file.id)[1]]
this_file.id_date<-lubridate::dmy(this_file.id_date); print(this_file.id_date)}
i
this_file.id
this_file.id_date<-subs$submission.date[which(subs$file.id==this_file.id)[1]]
this_file.id_date
this_file.id_date<-lubridate::dmy(this_file.id_date)
this_file.id_date
rcm_set_submission_date(
this_file.id,
this_file.id_date)
this_file.id_date
this_file.id_date %>% class
this_file.id_date %>% as.Date.POSIXct()
this_file.id_date <- as.Date.POSIXct(this_file.id_date)
rcm_set_submission_date(
this_file.id,
this_file.id_date)
this_file.id_date
this_file.id_date
debug(rcm_set_submission_date)
this_file.id_date
this_file.id_date %>% class
this_file.id_date %>% typeof
this_file.id_date %>% sgtr
this_file.id_date %>% attributes
rcm_set_submission_date(
this_file.id,
this_file.id_date)
format(date, format="%d-%b-%y")
load_all()
rcm_update_from_subs(subs,rcm)
rcm_dashboard()
rcm<-rcm_download(include_validated = F,include_archived = F)
rcm_check(rcm) %>% .$issue %>% table
rcm[rcm$unit =="data",] %>% rcm_check %>% .$issue %>% table
