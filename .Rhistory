)+scale_y_discrete(labels=function(x){strtrim(x,60)})+
# theme(panel.background = element_blank(),
#      panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
#      # panel.grid.major = element_blank(),
#      panel.grid.minor=element_blank(),
#      axis.text.y= element_text(size = 9))+theme(legend.position = "top")+labs(x="date",y="file id")
theme(panel.background = element_blank(),
panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
# panel.grid.major = element_blank(),
panel.grid.minor=element_blank(),
axis.text.y= element_text(size = 1),axis.text.x= element_text(size = 1,angle = 90,vjust = 0))+theme(legend.position = "top")+labs(x="date",y="file id")+
geom_vline(xintercept = Sys.Date(),col="black",lwd=10)+scale_x_date()
rcm_dateslong$date <- sapply(rcm_dateslong$date,lubridate::as_date)
rcm_dateslong %>% sapply(class)
rcm_dateslong %>% sapply(class) %>% kable
rcm_dateslong$date <- sapply(rcm_dateslong$date,lubridate::as_date)
rcm_dateslong %>% sapply(class) %>% kable
rcm_dateslong$date<-lubridate::as_date(rcm_dateslong$date)
rcm_dateslong %>% sapply(class) %>% kable
# rcm_dateslong %>% sapply(class) %>% kable
ggplot(rcm)+
geom_point(data = rcm_dateslong,
aes(x=date, y=reorder(file.id,as.numeric(date.minormax)),colour=datetype))+
# geom_segment(data=rcm,mapping = aes(y=reorder(file.id,as.numeric(date.minormax),),yend=file.id,
#                                     x=rcm$date.min,xend=date.max,
#                                     colour=date_style_status),
#              lwd=0.5)+
geom_point(data = rcm_dateslong, aes(x=date, y=reorder(file.id,as.numeric(date.minormax)),colour=datetype))+
scale_colour_manual(name="",values=c("date.endcollection.planned"="#ACACAD"   ,
"date.endcollection.actual"="#58585A",
"date.hqsubmission.planned.first"= "#FACDCD",
"date.hqsubmission.planned.latest"="#F7ACAC" ,
"date.hqsubmission.actual"="#CDCDCD",
"date.validated"="#EE5859"),labels=c("planned collection end",
"actual collection end",
"planned HQ submission (first)",
"planned HQ submission (latest)",
"actual HQ submission",
"validation")
)+scale_y_discrete(labels=function(x){strtrim(x,60)})+
# theme(panel.background = element_blank(),
#      panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
#      # panel.grid.major = element_blank(),
#      panel.grid.minor=element_blank(),
#      axis.text.y= element_text(size = 9))+theme(legend.position = "top")+labs(x="date",y="file id")
theme(panel.background = element_blank(),
panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
# panel.grid.major = element_blank(),
panel.grid.minor=element_blank(),
axis.text.y= element_text(size = 1),axis.text.x= element_text(size = 1,angle = 90,vjust = 0))+theme(legend.position = "top")+labs(x="date",y="file id")+
geom_vline(xintercept = Sys.Date(),col="black",lwd=10)+scale_x_date()
# rcm_dateslong %>% sapply(class) %>% kable
ggplot(rcm)+
geom_point(data = rcm_dateslong,
aes(x=date, y=reorder(file.id,as.numeric(date.minormax)),colour=datetype))+
# geom_segment(data=rcm,mapping = aes(y=reorder(file.id,as.numeric(date.minormax),),yend=file.id,
#                                     x=rcm$date.min,xend=date.max,
#                                     colour=date_style_status),
#              lwd=0.5)+
geom_point(data = rcm_dateslong, aes(x=date, y=reorder(file.id,as.numeric(date.minormax)),colour=datetype))+
scale_colour_manual(name="",values=c("date.endcollection.planned"="#ACACAD"   ,
"date.endcollection.actual"="#58585A",
"date.hqsubmission.planned.first"= "#FACDCD",
"date.hqsubmission.planned.latest"="#F7ACAC" ,
"date.hqsubmission.actual"="#CDCDCD",
"date.validated"="#EE5859"),labels=c("planned collection end",
"actual collection end",
"planned HQ submission (first)",
"planned HQ submission (latest)",
"actual HQ submission",
"validation")
)+scale_y_discrete(labels=function(x){strtrim(x,60)})+
# theme(panel.background = element_blank(),
#      panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
#      # panel.grid.major = element_blank(),
#      panel.grid.minor=element_blank(),
#      axis.text.y= element_text(size = 9))+theme(legend.position = "top")+labs(x="date",y="file id")
theme(panel.background = element_blank(),
panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
# panel.grid.major = element_blank(),
panel.grid.minor=element_blank(),
axis.text.y= element_text(size = 1),axis.text.x= element_text(size = 1,angle = 90,vjust = 0))+theme(legend.position = "top")+labs(x="date",y="file id")+
geom_vline(xintercept = Sys.Date(),col="black",lwd=1)+scale_x_date()
#' Gant chart of all RCM items
#' @param rcm the research cycle matrix from rcm_download(raw=F)
#' @return ggplot item
#' @export
rcm_gant<-function(rcm){
rcm$status[!grepl("HQ|validated|field|partner",rcm$status)]<-"other"
rcm$status<-as.factor(rcm$status)
rcm$date.min<-NULL
rcm$date.max<-NULL
rcm$date.min<-apply(rcm[,grep("^date\\.",names(rcm))],1,function(x){format.Date(min(as.Date(x,format="%Y-%m-%d"),na.rm = T),format="%Y-%m-%d")})
rcm$date.min <-as.Date(rcm$date.min,format="%Y-%m-%d")
rcm$date.max<-apply(rcm[,grep("^date\\.",names(rcm))],1,function(x){format.Date(max(as.Date(x,format="%Y-%m-%d"),na.rm = T),format="%Y-%m-%d")})
rcm$date.max <-as.Date(rcm$date.max,format="%Y-%m-%d")
rcm$date.minormax<-ifelse(is.na(rcm$date.min),rcm$date.max,rcm$date.min) %>% (lubridate::as_date)
rcm$date_style_status<-NA
rcm$date_style_status[rcm$status=="validated"]<-"date.validated"
rcm$date_style_status[rcm$status=="1 not received "]<-"date.hqsubmission.planned.latest"
rcm$date_style_status[rcm$status=="2 with HQ"]<-"date.hqsubmission.actual"
rcm$date_style_status[rcm$status=="with field"]<-"date.hqsubmission.actual"
rcm$date_style_status[rcm$status=="validated"]<-"date.validated"
rcm$date_style_status[rcm$status=="other"]<-"date.endcollection.planned"
hasnodate<-rcm %>% apply(1,function(x){all(is.na(x[c("date.hqsubmission.actual",
"date.endcollection.planned",
"date.endcollection.actual",
"date.hqsubmission.planned.first",
"date.hqsubmission.planned.latest",
"date.validated")]))})
rcm %>% gather("datetype","date",
date.hqsubmission.actual,
date.endcollection.planned,
date.endcollection.actual,
date.hqsubmission.planned.first,
date.hqsubmission.planned.latest,
date.validated) -> rcm_dateslong
rcm_dateslong$datetype<-factor(rcm_dateslong$datetype,levels = c("date.endcollection.planned"   ,
"date.endcollection.actual",
"date.hqsubmission.planned.first",
"date.hqsubmission.planned.latest",
"date.hqsubmission.actual",
"date.validated",ordered=T)
)
rcm_dateslong$date.minormax[is.na(rcm_dateslong$date.minormax)] <- (min(rcm_dateslong$date.min,na.rm=T))-1
rcm_dateslong$date <- sapply(rcm_dateslong$date,lubridate::as_date)
rcm_dateslong$date<-lubridate::as_date(rcm_dateslong$date)
# rcm_dateslong %>% sapply(class) %>% kable
ggplot(rcm)+
geom_point(data = rcm_dateslong,
aes(x=date, y=reorder(file.id,as.numeric(date.minormax)),colour=datetype))+
# geom_segment(data=rcm,mapping = aes(y=reorder(file.id,as.numeric(date.minormax),),yend=file.id,
#                                     x=rcm$date.min,xend=date.max,
#                                     colour=date_style_status),
#              lwd=0.5)+
geom_point(data = rcm_dateslong, aes(x=date, y=reorder(file.id,as.numeric(date.minormax)),colour=datetype))+
scale_colour_manual(name="",values=c("date.endcollection.planned"="#ACACAD"   ,
"date.endcollection.actual"="#58585A",
"date.hqsubmission.planned.first"= "#FACDCD",
"date.hqsubmission.planned.latest"="#F7ACAC" ,
"date.hqsubmission.actual"="#CDCDCD",
"date.validated"="#EE5859"),labels=c("planned collection end",
"actual collection end",
"planned HQ submission (first)",
"planned HQ submission (latest)",
"actual HQ submission",
"validation")
)+scale_y_discrete(labels=function(x){strtrim(x,60)})+
# theme(panel.background = element_blank(),
#      panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
#      # panel.grid.major = element_blank(),
#      panel.grid.minor=element_blank(),
#      axis.text.y= element_text(size = 9))+theme(legend.position = "top")+labs(x="date",y="file id")
theme(panel.background = element_blank(),
panel.grid.major = element_line(colour="#CCCCCC", size=0.05),
# panel.grid.major = element_blank(),
panel.grid.minor=element_blank(),
axis.text.y= element_text(size = 1),axis.text.x= element_text(size = 1,angle = 90,vjust = 0))+theme(legend.position = "top")+labs(x="date",y="file id")+
geom_vline(xintercept = Sys.Date(),col="black",lwd=1)+scale_x_date()
}
rcm<-rcm_download(include_archived = T,include_validated = T)
rcm_gant(rcm = rcm)
library(researchcyclematrix)
researchcyclematrix:::todo_create
devtools::install()
library(researchcyclematrix)
researchcyclematrix:::g_sheets_put('asdf','asdf','asdf','asdf')
devtools::install()
researchcyclematrix:::g_sheets_put('asdf','asdf','asdf','asdf')
hypegrammaR::from_analysisplan_map_to_output
hypegrammaR::from_analysisplan_map_to_output
# https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED
httr::POST(thisurl,googlesheets:::google_token(),valueInputOption="RAW",
body=
# paste0('{
#                         "values":[["',value,'"]]
# }') %>% cat
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}')
values=c("A","B","C")
)%>% print
values=c("A","B","C")
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}')
# https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED
httr::POST(thisurl,googlesheets:::google_token(),valueInputOption="RAW",
body=
# paste0('{
#                         "values":[["',value,'"]]
# }') %>% cat
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}')
value=c("A","B","C")
)%>% print
value=c("A","B","C")
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}')
RJSONIO::toJSON(value)
as.matrix(value)
t(as.matrix(value))
RJSONIO::toJSON(t(as.matrix(value)))
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}')
# https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED
httr::POST(thisurl,googlesheets:::google_token(),valueInputOption="RAW",
body=
# paste0('{
#                         "values":[["',value,'"]]
# }') %>% cat
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}') %>% cat
RJSONIO::toJSON(t(as.matrix(value)))
)%>% print
RJSONIO::toJSON(t(list(as.matrix(value))))
# https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED
httr::POST(thisurl,googlesheets:::google_token(),valueInputOption="RAW",
body=
# paste0('{
#                         "values":[["',value,'"]]
# }') %>% cat
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}') %>% cat
RJSONIO::toJSON(t(list(a=as.matrix(value))))
)%>% print
RJSONIO::toJSON(t(list(a=as.matrix(value))))
RJSONIO::toJSON(list(t(a=as.matrix(value))))
RJSONIO::toJSON(list(a=t(as.matrix(value))))
RJSONIO::toJSON(list(curlybrackets=t(as.matrix(value))))
RJSONIO::toJSON(t(as.matrix(value)))
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}')
RJSONIO::toJSON(list(values=t(as.matrix(value))))
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}')
paste0('{
"values":[[',paste0(paste0('"',value,'"'),collapse=","),']]
}') %>% cat
usethis::use_package("RJSONIO")
t
t
devtools::install()
library(researchcyclematrix)
RJSONIO::toJSON("[")
library(jsonlite)
jsonlite::toJSON("[")
jsonlite::toJSON("[\n")
RJSONIO::toJSON("[\n")
load_all()
library(devtools)
load_all()
g_sheets_append_row(c("a","b","c"))
g_sheets_append_row(c("a\n","b","c"))
g_sheets_append_row(c("a\n[","b","c"))
g_sheets_append_row(c("a\n[","b","c",'asdf"'))
g_sheets_append_row(c("a\n[","b","c",'asdf""'))
g_sheets_append_row(c("a\n[","b","c",'asdf"" [ ] asdf "" "'))
devtools::install()
install()
# package names
from_cran<-c("assertthat","crayon", "data.table", "dplyr", "ggplot2", "ggthemes",
"htmltools", "knitr", "magrittr", "purrr", "questionr", "reshape",
"reshape2", "rmarkdown", "stringi", "stringr", "survey", "testthat",
"tibble", "tidyr", "utils")
paste0("install.packages(",from_cran,")\n") %>% cat
library(devtools)
install()
document()
library(devtools)
document()
install()
library(researchcyclematrix)
todo<-todo_download()
researchcyclematrix::rcm_set_to_validated
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
rcm_set_validation_date(file.id)
}
rcm_set_hours_worked
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
}
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
}
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
#' @r
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
file.id
}
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
#' @r
rcm_set_hours_worked <- function (file.id,hours){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
rcm_change_value(file.id, column = "BB", value = hours)
invisible(file.id)
}
#' save the hours worked in the rcm
#' @param file.id the file id
#' @param hours the number of hours worked on the file id
#' @return the file id
rcm_set_hours_worked <- function (file.id,hours){
if(!is.na(hours)){
if(assertthat::is.number(hours))
hours<-as.numeric(hours)
}else{
hours<-"NA"
}
rcm_change_value(file.id, column = "BB", value = hours)
invisible(file.id)
}
#' set the validation date in the gdrive RCM
#' @param file.id the file id of the item to change
#' @param date the date to set it to. Must be of class "POSIXct".
#' @return returns nothing important
#' @export
rcm_set_validation_date<-function(file.id,hours_worked=0.5,date=as.POSIXct(Sys.Date())){
# stop if input no good:
if(!("POSIXct" %in% class(date))){
stop("date must be in POSIXct format")
}
if(!(is.numeric(hours_worked)|is.na(hours_worked))){stop("hours worked must be a number or NA")}
if(is.null(file.id) | is.null(date)){stop("inputs can't be NULL")}
date_text <- format(date, format="%d-%b-%y")
if(length(date_text)!=1){stop("date not converted to single date text")}
rcm_change_value(file.id,column = "X",value = date_text)
rcm_set_hours_worked(file.id,hours_worked)
}
#' set an item's status to "validated" on google drive
#' @param file.id the items file id name as a string
#' @export
rcm_set_to_validated<-function(file.id,hours_worked){
if(!(is.numeric(hours_worked)|is.na(hours_worked))){stop("hours worked must be a number or NA")}
message(paste0("setting to 'validated': ",file.id))
rcm_change_value(file.id,column = "V",value = "validated (api_state)")
rcm_set_validation_date(file.id)
rcm_set_hours_worked(file.id,hours_worked)
}
todo
rcm_set_hours_worked("JOR1807_UN Women_Project_Monitoring_Data_1",10)
devtools::install()
library(researchcyclematrix)
rm(rcm_set_to_validated())
rm(rcm_set_to_validated)
todo<-todo_download()
rcm_set_hours_worked("JOR1807_UN Women_Project_Monitoring_Data_1",10)
rm(rcm_set_hours_worked)
researchcyclematrix:::rcm_set_hours_worked("JOR1807_UN Women_Project_Monitoring_Data_1",10)
rcm_set_to_validated("JOR1807_UN Women_Project_Monitoring_Data_1",hours_worked = 5)
todo_next(todo,1)
todo<-todo_validate_next(todo,100)
rcm_set_to_validated("JOR1807_UN Women_Project_Monitoring_Data_1")
if(!("rstudioapi" %in% installed.packages()[,"Package"])){install.packages("rstudioapi")};require("rstudioapi")
# if(!("rstudioapi" %in% installed.packages()[,"Package"])){install.packages("rstudioapi")};require("rstudioapi")
setwd("../../../Downloads/yann stuff/")
# take last it of splitted string
sp_multiple<-function(x,sep){tail(strsplit(x,sep)[[1]],1)}
concatenate_sm_var<-function(questionnaire,my_sm_vars){
# my_sm_vars: the select_multiple variable from the questionnaire
pattern=paste0(my_sm_vars,"\\.")
#get the var names
sm_name<-names(questionnaire)[grep(pattern,names(questionnaire))]
# extract the choices names from headings
ch<-lapply(sm_name,sp_multiple,sep=pattern) %>% unlist
# get the choices from questionnaire
choices_questionnaire<-questionnaire$choices_per_variable[[my_sm_vars]]$name
# check if it matchs with questionnaires
if(!all(ch %in% choices_questionnaire)){
# it does not but maybe we fixe it with make.names
if(all(ch %in% make.names(choices_questionnaire))){
# reorder questionnaire choices to follow data order
ch<-choices_questionnaire[match(ch,make.names(choices_questionnaire))]
} else {
print(paste0(my_sm_vars,": the headings choices do not match the questionnaire choices"))
}
}
# here assumption that is 0/1 or TRUE/FALSE only - no characters
noname<-function(vec,ch){
ch[vec%in%c(1,TRUE)] %>% paste(collapse=" ")
}
# extract the data
sm_data<-questionnaire[sm_name] %>% as.data.frame
# contecatenate the choices
var_sm_out<-apply(sm_data,1,noname,ch=ch)
# would return the data
# sm_data[[my_sm_vars]]<-var_sm_out
# return(sm_data)
# just return the vector
return(var_sm_out)
}
#
# # load all the codes, libraries etc.:
#
# getwd()
# source("./internal/R/dependencies.R")
list.files()
data<-read.csv("./internal/input_files/data.csv",stringsAsFactors = F)
# load questionnaire and create associated functions:
questionnaire<-load_questionnaire(data,questions.file = "questions.csv",
choices.file = "choices.csv",
choices.label.column.to.use = "name")
library(koboquest)
ls(envir = "package:researchcyclematrix")
ls(envir = "researchcyclematrix")
lsf.str("package:researchcyclematrix")
library(researchcyclematrix)
lsf.str("package:researchcyclematrix")
library(devtools)
install_github("mabafaba/researchcyclematrix")
researchcyclematrix::rcm_delayed_to_google_sheet
usethis::use_package("tibble","Depends")
usethis::use_package("dplyr")
load_all()
usethis::use_package("dplyr","Depends")
library("researchcyclematrix")
researchcyclematrix::rcm_dashboard()
todo<-todo_download()
todo[todo$hq_focal_point=="Martin"]
todo[todo$hq_focal_point=="Martin",]
todo$hq_focal_point %>% table
rcm_find_file.id(rcm,"IRQ JPMI")
rcm<-rcm_download()
rcm_find_row_by_file.id(rcm,"IRQ JPMI")
rcm_find_row_by_file.id(rcm,"IRQ joint")
rcm_find_row_by_file.id(rcm,"IRQ price")
rcm_find_row_by_file.id(rcm,"IRQ price")
rcm_find_row_by_file.id(rcm,"IRQ price") -> id
id
id$file.id
todo
rcm_find_row_by_file.id(rcm,"SYR1701a_HSOS Round 46 data / Analysis" ) %>% t %>% kable
rcm[rcm$file.id=="SYR1701a_HSOS Round 46 data / Analysis"]
rcm[rcm$file.id=="SYR1701a_HSOS Round 46 data / Analysis",]
usethis::use_package("rmarkdown")
usethis::use_package("rmarkdowasdfn")
usethis::use_package("knitr")
roxygen2::roxygenise(clean = TRUE)
rcm_download
rcm<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=RC_Matrix_2.1",
stringsAsFactors = F)
ffb<-rcm
ffb %>% as_tibble()
ffb$file.id.AFG1803.AFG1803.AFG1803.AFG1803.BGD1703.BGD1703.BGD1803.BGD1803.BGD1806.BGD1806.BGD1902b.BGD1902b.BRA1802.BRA1802.BRA1802.BRA1802.BRA1802
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=RC_Matrix_2.1",
stringsAsFactors = F)
ffb
ffb %>% as_tibble
ffb %>% tibble::as_tibble %>% nrow
ffb %>% (tibble::as_tibble) %>% nrow
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv",
stringsAsFactors = F)
ffb
ffb %>% (tibble::as_tibble) %>% nrow
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=submissions",
stringsAsFactors = F)
ffb %>% (tibble::as_tibble)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=submissions",
stringsAsFactors = F)
ffb
ffb %>% (tibble::as_tibble) %>% nrow
ffb %>% (tibble::as_tibble)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=raw copy",
stringsAsFactors = F)
ffb
ffb %>% (tibble::as_tibble)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=raw copy",
stringsAsFactors = F)
ffb %>% (tibble::as_tibble) %>% names
googlesheets::gs_read_csv(ss = 'afd')
?googlesheets
browseVignettes(googlesheets)
browseVignettes("googlesheets")
my_sheets<-gs_ls()
my_sheets
my_sheets
researchcyclematrix::rcm_dashboard(update_rcm = F)
rcm_dashboard
rcm<-rcm_downlaod()
rcm<-rcm_download()
sub<-subs_download()
rcm_update_from_subs(subs,rcm)
subs<-sub
rcm_update_from_subs(subs,rcm)
debugonce(rcm_dashboard)
rcm_dashboard(rcm,subs,F)
debugonce(country_status_markdown)
rcm<-rcm_download(include_validated = T)
rcm_dashboard(rcm,subs,F)
ffb<-read.csv("https://docs.google.com/spreadsheets/d/1fldR9_dx64otky6TvFMK29-pxUKrRUrpqdSzE8npVHA/gviz/tq?tqx=out:csv&sheet=rawcopy",
stringsAsFactors = F)
